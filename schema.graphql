type AprUpdated @entity(immutable: true) {
  id: Bytes!
  newApr: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

#############################
####### Token Metadata ######
#############################

type Token @entity {
  " Smart contract address of the token "
  id: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Total number of unique token holders who are currently holding more the token "
  currentHolderCount: BigInt!

  " Total number of cumulative unique token holders who held or are holding the token "
  cumulativeHolderCount: BigInt!

  " Total number of token transfer events "
  transferCount: BigInt!

  " Total number of token mint events "
  mintCount: BigInt!

  " Total number of token burn events "
  burnCount: BigInt!

  " Total token supply "
  totalSupply: BigInt!

  " Total token burned "
  totalBurned: BigInt!

  " Total token minted "
  totalMinted: BigInt!

  " Created timestamp "
  timestamp: BigInt!

  " Token holder's balance "
  holdersBalance: [AccountBalance!]! @derivedFrom(field: "token")
}

#############################
####### Token Metadata ######
#############################

type ERC721Token @entity {
  " Address of the token, { Contract Address }-{ Token ID }  "
  id: Bytes!

  " Collection for the token "
  collection: Collection!

  " ID of the token from the collection "
  tokenID: BigInt!

  " URI of the token "
  tokenURI: String

  " The owner for the token "
  owner: Account!

  " Timestamp of the token's mint "
  mintTime: BigInt!

  " Timestamp of the token's last updated timestamp "
  lastUpdatedTime: BigInt!
}

#########################################
####### ERC721 Collection Metadata ######
#########################################

type Collection @entity {
  " ERC721 collection address "
  id: Bytes!

  " Name of the collection "
  name: String

  " Symbol of the collection "
  symbol: String

  " Flag for whether ERC721 metadata is supported "
  supportsERC721Metadata: Boolean!

  " Total number of unique minted tokens in the collection "
  tokenCount: BigInt!

  " Total number of unique token owners holding tokens in the collection "
  ownerCount: BigInt!

  " Total number of token transfer events "
  transferCount: BigInt!

  " Tokens in the collection "
  tokens: [ERC721Token!]! @derivedFrom(field: "collection")

  " List of token transfers "
  transfers: [ERC721Transfer!]! @derivedFrom(field: "collection")

  " Token holder's balance "
  holdersBalance: [ERC721AccountBalance!]! @derivedFrom(field: "collection")
}

######################################
##### ERC721 Transfer Event Data #####
######################################

type ERC721Transfer @entity {
  " { Contract ID }-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The ERC721 Collection this event belongs to "
  collection: Collection!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " ID of the token transferred "
  tokenId: BigInt!

  " Account that received the tokens "
  to: Account!

  " Account that sent the tokens "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

##################################
##### Event-Level Data #####
##################################

interface Event {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Address that received the tokens "
  to: Account!

  " Address that sent the tokens "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type TransferEvent implements Event @entity {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Quantity of tokens transferred "
  amount: BigInt!

  " Account that received the tokens "
  to: Account!

  " Account that sent the tokens "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

##################################
######## Account MetaData ########
##################################

# An account is a unique Ethereum address
type Account @entity {
  " Address of the account "
  id: Bytes!

  " Total number of unique tokens that this account holds "
  tokenCount: BigInt!

  " Tokens that this account holds "
  tokens: [ERC721Token!]! @derivedFrom(field: "owner")

  " Token balances that this account holds "
  erc721balances: [ERC721AccountBalance!]! @derivedFrom(field: "account")

  " Token transfers to this account "
  transferTo: [ERC721Transfer!]! @derivedFrom(field: "to")

  " Token transfers from this account "
  transferFrom: [ERC721Transfer!]! @derivedFrom(field: "from")

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  " Stake history of this account "
  flexibleStakeHistory: [FlexibleStakeHistory!]! @derivedFrom(field: "account")

  " Fixed stake history of this account "
  fixedStakeHistory: [FixedStakeHistory!]! @derivedFrom(field: "account")

  " Flexible Staking Info "
  flexibleStakingInfo: [FlexibleStakingInfo!]! @derivedFrom(field: "account")

  " Fixed Staking Info "
  fixedStakingInfo: [FixedStakingInfo!]! @derivedFrom(field: "account")
}

type ERC721AccountBalance @entity {
  " { Address Of the Account }-{ Address of the Collection }"
  id: Bytes!

  " Account address "
  account: Account!

  " Collection address "
  collection: Collection!

  " Current token amount for the collection "
  tokenCount: BigInt!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

type AccountBalance @entity {
  " { Address Of the Account }-{ Address of the Token }"
  id: Bytes!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigInt!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

type FlexibleStakingInfo @entity {
  id: Bytes!
  account: Account!
  apr: BigInt!
  rewards: BigInt!
  stakedAmount: BigInt!
  lastClaimedAt: BigInt!
}

type FixedStakingInfo @entity {
  id: Bytes!
  account: Account!
  positionId: BigInt!
  stakeType: Int!
  apr: BigInt!
  stakedAmount: BigInt!
  stakedAt: BigInt!
}

type FlexibleStakeHistory @entity {
  " { Address Of the Account }-{ Address of the Token }"
  id: Bytes!

  " Account address "
  account: Account!

  " Amount "
  amount: BigInt!

  " Type "
  type: String!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type FixedStakeHistory @entity {
  " { Address Of the Account }-{ Address of the Token }"
  id: Bytes!

  " Account address "
  account: Account!

  " Type "
  type: String!

  " StakeType "
  stakeType: Int!

  " Amount "
  amount: BigInt!

  " Position Id "
  positionId: BigInt!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}
